
M24M01EEPROMdrv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b0  080038b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038b8  080038b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080038c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000010  080038d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080038d0  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb66  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b19  00000000  00000000  0002cba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc8  00000000  00000000  0002e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  0002f388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020741  00000000  00000000  0002ff90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d71  00000000  00000000  000506d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8c5f  00000000  00000000  0005a442  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001230a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035fc  00000000  00000000  0012311c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003880 	.word	0x08003880

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08003880 	.word	0x08003880

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <M24M01EEPROMInit>:
uint8_t deviceIdentAddress;
uint8_t errorCount;
uint32_t timeout;

void M24M01EEPROMInit(I2C_HandleTypeDef i2c)
{
 8000518:	b084      	sub	sp, #16
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
 800051e:	f107 0c08 	add.w	ip, r7, #8
 8000522:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1 = i2c;
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <M24M01EEPROMInit+0x44>)
 8000528:	4618      	mov	r0, r3
 800052a:	f107 0108 	add.w	r1, r7, #8
 800052e:	2354      	movs	r3, #84	; 0x54
 8000530:	461a      	mov	r2, r3
 8000532:	f003 f991 	bl	8003858 <memcpy>
	deviceAddress = 0xA0; //1010 (E2)(E1)(A16)(R/W) = 1010 0000 = 0xA0
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <M24M01EEPROMInit+0x48>)
 8000538:	22a0      	movs	r2, #160	; 0xa0
 800053a:	701a      	strb	r2, [r3, #0]
	deviceIdentAddress = 0xB0; //1011 (E2)(E1)(X)(R/W) = 1011 0000 = 0xB0
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <M24M01EEPROMInit+0x4c>)
 800053e:	22b0      	movs	r2, #176	; 0xb0
 8000540:	701a      	strb	r2, [r3, #0]
	errorCount = 0;
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <M24M01EEPROMInit+0x50>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
	timeout = 0;
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <M24M01EEPROMInit+0x54>)
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000556:	b004      	add	sp, #16
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000038 	.word	0x20000038
 8000560:	20000094 	.word	0x20000094
 8000564:	20000095 	.word	0x20000095
 8000568:	2000008c 	.word	0x2000008c
 800056c:	20000090 	.word	0x20000090

08000570 <EEPROMReadIdentificationCodes>:

void EEPROMReadIdentificationCodes(uint8_t *stManufacturerData, uint8_t *familyCodeData, uint8_t *densityCodeData)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af04      	add	r7, sp, #16
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, deviceIdentAddress, 0x00, I2C_MEMADD_SIZE_16BIT, stManufacturerData, 1, HAL_MAX_DELAY);
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <EEPROMReadIdentificationCodes+0x70>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	b299      	uxth	r1, r3
 8000582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000586:	9302      	str	r3, [sp, #8]
 8000588:	2301      	movs	r3, #1
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2310      	movs	r3, #16
 8000592:	2200      	movs	r2, #0
 8000594:	4813      	ldr	r0, [pc, #76]	; (80005e4 <EEPROMReadIdentificationCodes+0x74>)
 8000596:	f001 fa5d 	bl	8001a54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, deviceIdentAddress, 0x01, I2C_MEMADD_SIZE_16BIT, familyCodeData, 1, HAL_MAX_DELAY);
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <EEPROMReadIdentificationCodes+0x70>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b299      	uxth	r1, r3
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a4:	9302      	str	r3, [sp, #8]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2310      	movs	r3, #16
 80005b0:	2201      	movs	r2, #1
 80005b2:	480c      	ldr	r0, [pc, #48]	; (80005e4 <EEPROMReadIdentificationCodes+0x74>)
 80005b4:	f001 fa4e 	bl	8001a54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, deviceIdentAddress, 0x02, I2C_MEMADD_SIZE_16BIT, densityCodeData, 1, HAL_MAX_DELAY);
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <EEPROMReadIdentificationCodes+0x70>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b299      	uxth	r1, r3
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c2:	9302      	str	r3, [sp, #8]
 80005c4:	2301      	movs	r3, #1
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2310      	movs	r3, #16
 80005ce:	2202      	movs	r2, #2
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <EEPROMReadIdentificationCodes+0x74>)
 80005d2:	f001 fa3f 	bl	8001a54 <HAL_I2C_Mem_Read>
}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000095 	.word	0x20000095
 80005e4:	20000038 	.word	0x20000038

080005e8 <EEPROMWriteData>:

bool EEPROMWriteData(uint8_t *data, uint32_t address, uint16_t length)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af04      	add	r7, sp, #16
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	4613      	mov	r3, r2
 80005f4:	80fb      	strh	r3, [r7, #6]
	uint8_t device = deviceAddress;
 80005f6:	4b1d      	ldr	r3, [pc, #116]	; (800066c <EEPROMWriteData+0x84>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	75fb      	strb	r3, [r7, #23]
	while(HAL_I2C_IsDeviceReady(&hi2c1, device, 10, 300) == HAL_TIMEOUT);
 80005fc:	bf00      	nop
 80005fe:	7dfb      	ldrb	r3, [r7, #23]
 8000600:	b299      	uxth	r1, r3
 8000602:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000606:	220a      	movs	r2, #10
 8000608:	4819      	ldr	r0, [pc, #100]	; (8000670 <EEPROMWriteData+0x88>)
 800060a:	f001 fc49 	bl	8001ea0 <HAL_I2C_IsDeviceReady>
 800060e:	4603      	mov	r3, r0
 8000610:	2b03      	cmp	r3, #3
 8000612:	d0f4      	beq.n	80005fe <EEPROMWriteData+0x16>
	if(address > MAXIMUMMEMORYADDRESS)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <EEPROMWriteData+0x8c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d901      	bls.n	8000620 <EEPROMWriteData+0x38>
	{
		return false;
 800061c:	2300      	movs	r3, #0
 800061e:	e020      	b.n	8000662 <EEPROMWriteData+0x7a>
	}

	if((address & 0x00010000) >> 16)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000626:	2b00      	cmp	r3, #0
 8000628:	d003      	beq.n	8000632 <EEPROMWriteData+0x4a>
	{
		device = device | 0x02;
 800062a:	7dfb      	ldrb	r3, [r7, #23]
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	75fb      	strb	r3, [r7, #23]
	}

	address = address & 0x0000FFFF;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	b29b      	uxth	r3, r3
 8000636:	60bb      	str	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(&hi2c1, device, address, I2C_MEMADD_SIZE_16BIT, data, length, HAL_MAX_DELAY) != HAL_OK)
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	b299      	uxth	r1, r3
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	b29a      	uxth	r2, r3
 8000640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000644:	9302      	str	r3, [sp, #8]
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2310      	movs	r3, #16
 8000650:	4807      	ldr	r0, [pc, #28]	; (8000670 <EEPROMWriteData+0x88>)
 8000652:	f001 f905 	bl	8001860 <HAL_I2C_Mem_Write>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <EEPROMWriteData+0x78>
	{
		return false;
 800065c:	2300      	movs	r3, #0
 800065e:	e000      	b.n	8000662 <EEPROMWriteData+0x7a>
	}

	return true;
 8000660:	2301      	movs	r3, #1
}
 8000662:	4618      	mov	r0, r3
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000094 	.word	0x20000094
 8000670:	20000038 	.word	0x20000038
 8000674:	000f4240 	.word	0x000f4240

08000678 <EEPROMReadData>:


bool EEPROMReadData(uint8_t *data, uint32_t address, uint16_t length)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af04      	add	r7, sp, #16
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	4613      	mov	r3, r2
 8000684:	80fb      	strh	r3, [r7, #6]
	uint8_t device = deviceAddress;
 8000686:	4b36      	ldr	r3, [pc, #216]	; (8000760 <EEPROMReadData+0xe8>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status = HAL_ERROR;
 800068c:	2301      	movs	r3, #1
 800068e:	75bb      	strb	r3, [r7, #22]
	errorCount = 0;
 8000690:	4b34      	ldr	r3, [pc, #208]	; (8000764 <EEPROMReadData+0xec>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
//	uint8_t deviceArray[2];
	if(address > MAXIMUMMEMORYADDRESS)
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	4a33      	ldr	r2, [pc, #204]	; (8000768 <EEPROMReadData+0xf0>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d901      	bls.n	80006a2 <EEPROMReadData+0x2a>
	{
		return false;
 800069e:	2300      	movs	r3, #0
 80006a0:	e059      	b.n	8000756 <EEPROMReadData+0xde>
	}

	if((address & 0x00010000) >> 16)
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d003      	beq.n	80006b4 <EEPROMReadData+0x3c>
	{
		device = device | 0x02;
 80006ac:	7dfb      	ldrb	r3, [r7, #23]
 80006ae:	f043 0302 	orr.w	r3, r3, #2
 80006b2:	75fb      	strb	r3, [r7, #23]
	}
	address = address & 0x0000FFFF;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	60bb      	str	r3, [r7, #8]
//	deviceArray[0] = (address & 0x0000FF00) >> 8;
//	deviceArray[1] = (address & 0x000000FF);
//	HAL_I2C_Master_Transmit(&hi2c1, device, deviceArray, 2, HAL_MAX_DELAY);
//	HAL_I2C_Master_Receive(&hi2c1, device, data, length, HAL_MAX_DELAY);
//  Do two reads to ensure the data is present
	while(status != HAL_OK)
 80006ba:	e048      	b.n	800074e <EEPROMReadData+0xd6>
	{
		while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006bc:	bf00      	nop
 80006be:	482b      	ldr	r0, [pc, #172]	; (800076c <EEPROMReadData+0xf4>)
 80006c0:	f001 fd1c 	bl	80020fc <HAL_I2C_GetState>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b20      	cmp	r3, #32
 80006c8:	d1f9      	bne.n	80006be <EEPROMReadData+0x46>
		while(HAL_I2C_IsDeviceReady(&hi2c1, device, 10, 1000) == HAL_TIMEOUT);
 80006ca:	bf00      	nop
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	b299      	uxth	r1, r3
 80006d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d4:	220a      	movs	r2, #10
 80006d6:	4825      	ldr	r0, [pc, #148]	; (800076c <EEPROMReadData+0xf4>)
 80006d8:	f001 fbe2 	bl	8001ea0 <HAL_I2C_IsDeviceReady>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d0f4      	beq.n	80006cc <EEPROMReadData+0x54>
//		HAL_Delay(1);
		timeout = getTimeoutUS();
 80006e2:	f000 fb53 	bl	8000d8c <getTimeoutUS>
 80006e6:	4602      	mov	r2, r0
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <EEPROMReadData+0xf8>)
 80006ea:	601a      	str	r2, [r3, #0]
		while(!hasTimedOutUS(750, timeout));
 80006ec:	bf00      	nop
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <EEPROMReadData+0xf8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	f240 20ee 	movw	r0, #750	; 0x2ee
 80006f8:	f000 fb74 	bl	8000de4 <hasTimedOutUS>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f083 0301 	eor.w	r3, r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1f2      	bne.n	80006ee <EEPROMReadData+0x76>
		status = HAL_I2C_Mem_Read(&hi2c1, device, address, I2C_MEMADD_SIZE_16BIT, data, length, HAL_MAX_DELAY);
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	b299      	uxth	r1, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	b29a      	uxth	r2, r3
 8000710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000714:	9302      	str	r3, [sp, #8]
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2310      	movs	r3, #16
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <EEPROMReadData+0xf4>)
 8000722:	f001 f997 	bl	8001a54 <HAL_I2C_Mem_Read>
 8000726:	4603      	mov	r3, r0
 8000728:	75bb      	strb	r3, [r7, #22]
		if((status != HAL_OK && status != HAL_TIMEOUT) || errorCount == MAXNUMOFERRORS) return false;
 800072a:	7dbb      	ldrb	r3, [r7, #22]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <EEPROMReadData+0xbe>
 8000730:	7dbb      	ldrb	r3, [r7, #22]
 8000732:	2b03      	cmp	r3, #3
 8000734:	d103      	bne.n	800073e <EEPROMReadData+0xc6>
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <EEPROMReadData+0xec>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b05      	cmp	r3, #5
 800073c:	d101      	bne.n	8000742 <EEPROMReadData+0xca>
 800073e:	2300      	movs	r3, #0
 8000740:	e009      	b.n	8000756 <EEPROMReadData+0xde>
		errorCount++;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <EEPROMReadData+0xec>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <EEPROMReadData+0xec>)
 800074c:	701a      	strb	r2, [r3, #0]
	while(status != HAL_OK)
 800074e:	7dbb      	ldrb	r3, [r7, #22]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1b3      	bne.n	80006bc <EEPROMReadData+0x44>
//	{
//		return false;
//	}


	return true;
 8000754:	2301      	movs	r3, #1
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000094 	.word	0x20000094
 8000764:	2000008c 	.word	0x2000008c
 8000768:	000f4240 	.word	0x000f4240
 800076c:	20000038 	.word	0x20000038
 8000770:	20000090 	.word	0x20000090

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b095      	sub	sp, #84	; 0x54
 8000778:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f000 fbcd 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f89f 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f000 f981 	bl	8000a88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000786:	f000 f905 	bl	8000994 <MX_I2C1_Init>
  MX_TIM2_Init();
 800078a:	f000 f931 	bl	80009f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  initTimeout(&htim2);
 800078e:	4842      	ldr	r0, [pc, #264]	; (8000898 <main+0x124>)
 8000790:	f000 fadc 	bl	8000d4c <initTimeout>
  M24M01EEPROMInit(hi2c1);
 8000794:	4c41      	ldr	r4, [pc, #260]	; (800089c <main+0x128>)
 8000796:	4668      	mov	r0, sp
 8000798:	f104 0310 	add.w	r3, r4, #16
 800079c:	2244      	movs	r2, #68	; 0x44
 800079e:	4619      	mov	r1, r3
 80007a0:	f003 f85a 	bl	8003858 <memcpy>
 80007a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007a8:	f7ff feb6 	bl	8000518 <M24M01EEPROMInit>

  for(int i = 0; i < 20; i++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	e009      	b.n	80007c6 <main+0x52>
  {
	  writeData2[i] = i;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	b2d9      	uxtb	r1, r3
 80007b6:	4a3a      	ldr	r2, [pc, #232]	; (80008a0 <main+0x12c>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 20; i++)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b13      	cmp	r3, #19
 80007ca:	ddf2      	ble.n	80007b2 <main+0x3e>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Read Identification Code from Table 4 of datasheet
	  EEPROMReadIdentificationCodes(STCode, I2CCode, DensityCode);
 80007cc:	4a35      	ldr	r2, [pc, #212]	; (80008a4 <main+0x130>)
 80007ce:	4936      	ldr	r1, [pc, #216]	; (80008a8 <main+0x134>)
 80007d0:	4836      	ldr	r0, [pc, #216]	; (80008ac <main+0x138>)
 80007d2:	f7ff fecd 	bl	8000570 <EEPROMReadIdentificationCodes>

	  //Check if data is correct
	  if(STCode[0] != 0x20) while(1);
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <main+0x138>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b20      	cmp	r3, #32
 80007dc:	d000      	beq.n	80007e0 <main+0x6c>
 80007de:	e7fe      	b.n	80007de <main+0x6a>
	  if(I2CCode[0] != 0xE0) while(1);
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <main+0x134>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2be0      	cmp	r3, #224	; 0xe0
 80007e6:	d000      	beq.n	80007ea <main+0x76>
 80007e8:	e7fe      	b.n	80007e8 <main+0x74>
	  if(DensityCode[0] != 0x11) while(1);
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <main+0x130>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b11      	cmp	r3, #17
 80007f0:	d000      	beq.n	80007f4 <main+0x80>
 80007f2:	e7fe      	b.n	80007f2 <main+0x7e>

	  while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80007f4:	bf00      	nop
 80007f6:	4829      	ldr	r0, [pc, #164]	; (800089c <main+0x128>)
 80007f8:	f001 fc80 	bl	80020fc <HAL_I2C_GetState>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b20      	cmp	r3, #32
 8000800:	d1f9      	bne.n	80007f6 <main+0x82>
	  if(!EEPROMWriteData(writeData1, 0x0000, 1)) while(1);
 8000802:	2201      	movs	r2, #1
 8000804:	2100      	movs	r1, #0
 8000806:	482a      	ldr	r0, [pc, #168]	; (80008b0 <main+0x13c>)
 8000808:	f7ff feee 	bl	80005e8 <EEPROMWriteData>
 800080c:	4603      	mov	r3, r0
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d000      	beq.n	800081a <main+0xa6>
 8000818:	e7fe      	b.n	8000818 <main+0xa4>
	  HAL_Delay(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fbee 	bl	8000ffc <HAL_Delay>
	  while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000820:	bf00      	nop
 8000822:	481e      	ldr	r0, [pc, #120]	; (800089c <main+0x128>)
 8000824:	f001 fc6a 	bl	80020fc <HAL_I2C_GetState>
 8000828:	4603      	mov	r3, r0
 800082a:	2b20      	cmp	r3, #32
 800082c:	d1f9      	bne.n	8000822 <main+0xae>
	  if(EEPROMReadData(readData1, 0x0000, 1))
 800082e:	2201      	movs	r2, #1
 8000830:	2100      	movs	r1, #0
 8000832:	4820      	ldr	r0, [pc, #128]	; (80008b4 <main+0x140>)
 8000834:	f7ff ff20 	bl	8000678 <EEPROMReadData>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d009      	beq.n	8000852 <main+0xde>
	  {
		  if(readData1[0] != 0x10) while(1);
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <main+0x140>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b10      	cmp	r3, #16
 8000844:	d000      	beq.n	8000848 <main+0xd4>
 8000846:	e7fe      	b.n	8000846 <main+0xd2>
		  handleHeartbeatLED(GPIOC, GPIO_PIN_13);
 8000848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084c:	481a      	ldr	r0, [pc, #104]	; (80008b8 <main+0x144>)
 800084e:	f000 fae9 	bl	8000e24 <handleHeartbeatLED>
	  }

	  if(!EEPROMWriteData(writeData2, 0x0001, 20)) while(1);
 8000852:	2214      	movs	r2, #20
 8000854:	2101      	movs	r1, #1
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <main+0x12c>)
 8000858:	f7ff fec6 	bl	80005e8 <EEPROMWriteData>
 800085c:	4603      	mov	r3, r0
 800085e:	f083 0301 	eor.w	r3, r3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d000      	beq.n	800086a <main+0xf6>
 8000868:	e7fe      	b.n	8000868 <main+0xf4>
	  HAL_Delay(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f000 fbc6 	bl	8000ffc <HAL_Delay>
	  if(EEPROMReadData(readData2, 0x0001, 20))
 8000870:	2214      	movs	r2, #20
 8000872:	2101      	movs	r1, #1
 8000874:	4811      	ldr	r0, [pc, #68]	; (80008bc <main+0x148>)
 8000876:	f7ff feff 	bl	8000678 <EEPROMReadData>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0a5      	beq.n	80007cc <main+0x58>
	  {
		  if(readData2[1] != 0x01) while(1);
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <main+0x148>)
 8000882:	785b      	ldrb	r3, [r3, #1]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d000      	beq.n	800088a <main+0x116>
 8000888:	e7fe      	b.n	8000888 <main+0x114>
		  handleHeartbeatLED(GPIOC, GPIO_PIN_13);
 800088a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088e:	480a      	ldr	r0, [pc, #40]	; (80008b8 <main+0x144>)
 8000890:	f000 fac8 	bl	8000e24 <handleHeartbeatLED>
	  EEPROMReadIdentificationCodes(STCode, I2CCode, DensityCode);
 8000894:	e79a      	b.n	80007cc <main+0x58>
 8000896:	bf00      	nop
 8000898:	200000d0 	.word	0x200000d0
 800089c:	20000038 	.word	0x20000038
 80008a0:	2000009c 	.word	0x2000009c
 80008a4:	200000c4 	.word	0x200000c4
 80008a8:	200000c8 	.word	0x200000c8
 80008ac:	20000098 	.word	0x20000098
 80008b0:	20000000 	.word	0x20000000
 80008b4:	200000cc 	.word	0x200000cc
 80008b8:	40020800 	.word	0x40020800
 80008bc:	200000b0 	.word	0x200000b0

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	; 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2234      	movs	r2, #52	; 0x34
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 ffcd 	bl	800386e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	4b28      	ldr	r3, [pc, #160]	; (800098c <SystemClock_Config+0xcc>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a27      	ldr	r2, [pc, #156]	; (800098c <SystemClock_Config+0xcc>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <SystemClock_Config+0xcc>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	2300      	movs	r3, #0
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <SystemClock_Config+0xd0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a21      	ldr	r2, [pc, #132]	; (8000990 <SystemClock_Config+0xd0>)
 800090a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <SystemClock_Config+0xd0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000920:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000924:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000930:	2304      	movs	r3, #4
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000934:	2354      	movs	r3, #84	; 0x54
 8000936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4618      	mov	r0, r3
 800094a:	f002 f91f 	bl	8002b8c <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000954:	f000 f90e 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2103      	movs	r1, #3
 8000974:	4618      	mov	r0, r3
 8000976:	f001 ff2b 	bl	80027d0 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000980:	f000 f8f8 	bl	8000b74 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3750      	adds	r7, #80	; 0x50
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_I2C1_Init+0x50>)
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <MX_I2C1_Init+0x54>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_I2C1_Init+0x58>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009d2:	f000 fe0d 	bl	80015f0 <HAL_I2C_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009dc:	f000 f8ca 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000038 	.word	0x20000038
 80009e8:	40005400 	.word	0x40005400
 80009ec:	000186a0 	.word	0x000186a0

080009f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10500;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a16:	f642 1204 	movw	r2, #10500	; 0x2904
 8000a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a36:	f002 faeb 	bl	8003010 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a40:	f000 f898 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a52:	f002 fc34 	bl	80032be <HAL_TIM_ConfigClockSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a5c:	f000 f88a 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a6e:	f002 fe3f 	bl	80036f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a78:	f000 f87c 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000d0 	.word	0x200000d0

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a30      	ldr	r2, [pc, #192]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a29      	ldr	r2, [pc, #164]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_GPIO_Init+0xe0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b14:	4815      	ldr	r0, [pc, #84]	; (8000b6c <MX_GPIO_Init+0xe4>)
 8000b16:	f000 fd37 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	4814      	ldr	r0, [pc, #80]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000b20:	f000 fd32 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0xe4>)
 8000b3e:	f000 fb91 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b42:	2310      	movs	r3, #16
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000b5a:	f000 fb83 	bl	8001264 <HAL_GPIO_Init>

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020400 	.word	0x40020400

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12b      	bne.n	8000c4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c12:	23c0      	movs	r3, #192	; 0xc0
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c22:	2304      	movs	r3, #4
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <HAL_I2C_MspInit+0x8c>)
 8000c2e:	f000 fb19 	bl	8001264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020400 	.word	0x40020400

08000c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c74:	d115      	bne.n	8000ca2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_TIM_Base_MspInit+0x48>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_TIM_Base_MspInit+0x48>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_TIM_Base_MspInit+0x48>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	201c      	movs	r0, #28
 8000c98:	f000 faad 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c9c:	201c      	movs	r0, #28
 8000c9e:	f000 fac6 	bl	800122e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f95a 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <TIM2_IRQHandler+0x10>)
 8000d12:	f002 f9cc 	bl	80030ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000d0 	.word	0x200000d0

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <SystemInit+0x28>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <SystemInit+0x28>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SystemInit+0x28>)
 8000d36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <initTimeout>:
static uint32_t currentTimeUS;
static uint32_t heartbeatStartTime;


void initTimeout(TIM_HandleTypeDef * htim2)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	timeModule = htim2;
 8000d54:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <initTimeout+0x30>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
	currentTimeMS = 0;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <initTimeout+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
	currentTimeUS = 0;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <initTimeout+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
	heartbeatStartTime = 0;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <initTimeout+0x3c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(htim2);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f002 f97a 	bl	8003066 <HAL_TIM_Base_Start_IT>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000110 	.word	0x20000110
 8000d80:	2000002c 	.word	0x2000002c
 8000d84:	20000030 	.word	0x20000030
 8000d88:	20000034 	.word	0x20000034

08000d8c <getTimeoutUS>:
{
	currentTimeMS = 0;
}

uint32_t getTimeoutUS(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	return currentTimeUS;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <getTimeoutUS+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000030 	.word	0x20000030

08000da4 <hasTimedOut>:
{
	currentTimeUS = 0;
}

bool hasTimedOut(uint32_t timeoutLimit, uint32_t startTime)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	if(timeoutLimit > UINT32_MAX - currentTimeMS)
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <hasTimedOut+0x3c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d901      	bls.n	8000dbe <hasTimedOut+0x1a>
		return true;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e009      	b.n	8000dd2 <hasTimedOut+0x2e>

	if(timeoutLimit <= currentTimeMS - startTime)
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <hasTimedOut+0x3c>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d801      	bhi.n	8000dd0 <hasTimedOut+0x2c>
		return true;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <hasTimedOut+0x2e>
	return false;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	2000002c 	.word	0x2000002c

08000de4 <hasTimedOutUS>:

bool hasTimedOutUS(uint32_t timeoutLimit, uint32_t startTime)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
	if(timeoutLimit > UINT32_MAX - currentTimeUS)
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <hasTimedOutUS+0x3c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d901      	bls.n	8000dfe <hasTimedOutUS+0x1a>
		return true;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e009      	b.n	8000e12 <hasTimedOutUS+0x2e>

	if(timeoutLimit <= currentTimeUS - startTime)
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <hasTimedOutUS+0x3c>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d801      	bhi.n	8000e10 <hasTimedOutUS+0x2c>
		return true;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <hasTimedOutUS+0x2e>
	return false;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000030 	.word	0x20000030

08000e24 <handleHeartbeatLED>:

void handleHeartbeatLED(GPIO_TypeDef * GPIO, uint16_t pin)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	807b      	strh	r3, [r7, #2]
	if(hasTimedOut(HEARTBEATTIME, heartbeatStartTime))
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <handleHeartbeatLED+0x3c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e3a:	f7ff ffb3 	bl	8000da4 <hasTimedOut>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d008      	beq.n	8000e56 <handleHeartbeatLED+0x32>
	{
		heartbeatStartTime = currentTimeMS;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <handleHeartbeatLED+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <handleHeartbeatLED+0x3c>)
 8000e4a:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIO, pin);
 8000e4c:	887b      	ldrh	r3, [r7, #2]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 fbb2 	bl	80015ba <HAL_GPIO_TogglePin>
	}
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000034 	.word	0x20000034
 8000e64:	2000002c 	.word	0x2000002c

08000e68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == timeModule)
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d116      	bne.n	8000ea8 <HAL_TIM_PeriodElapsedCallback+0x40>
  {
	  currentTimeUS += 250;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	33fa      	adds	r3, #250	; 0xfa
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e82:	6013      	str	r3, [r2, #0]
	  if(currentTimeUS % 1000 == 0)
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e8e:	099b      	lsrs	r3, r3, #6
 8000e90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e94:	fb01 f303 	mul.w	r3, r1, r3
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d104      	bne.n	8000ea8 <HAL_TIM_PeriodElapsedCallback+0x40>
	  {
		  currentTimeMS++;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ea6:	6013      	str	r3, [r2, #0]
	  }

  }
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	20000110 	.word	0x20000110
 8000eb8:	20000030 	.word	0x20000030
 8000ebc:	10624dd3 	.word	0x10624dd3
 8000ec0:	2000002c 	.word	0x2000002c

08000ec4 <Reset_Handler>:
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x14>
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e003      	b.n	8000ed4 <LoopCopyDataInit>

08000ecc <CopyDataInit>:
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <LoopFillZerobss+0x18>)
 8000ece:	585b      	ldr	r3, [r3, r1]
 8000ed0:	5043      	str	r3, [r0, r1]
 8000ed2:	3104      	adds	r1, #4

08000ed4 <LoopCopyDataInit>:
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <LoopFillZerobss+0x1c>)
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <LoopFillZerobss+0x20>)
 8000ed8:	1842      	adds	r2, r0, r1
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d3f6      	bcc.n	8000ecc <CopyDataInit>
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x24>)
 8000ee0:	e002      	b.n	8000ee8 <LoopFillZerobss>

08000ee2 <FillZerobss>:
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f842 3b04 	str.w	r3, [r2], #4

08000ee8 <LoopFillZerobss>:
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <LoopFillZerobss+0x28>)
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3f9      	bcc.n	8000ee2 <FillZerobss>
 8000eee:	f7ff ff17 	bl	8000d20 <SystemInit>
 8000ef2:	f002 fc8d 	bl	8003810 <__libc_init_array>
 8000ef6:	f7ff fc3d 	bl	8000774 <main>
 8000efa:	4770      	bx	lr
 8000efc:	20050000 	.word	0x20050000
 8000f00:	080038c0 	.word	0x080038c0
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	20000010 	.word	0x20000010
 8000f10:	20000118 	.word	0x20000118

08000f14 <ADC_IRQHandler>:
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_Init+0x40>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_Init+0x40>)
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_Init+0x40>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f94d 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fe1a 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f965 	bl	800124a <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f98:	f000 f92d 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	20000008 	.word	0x20000008

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2000000c 	.word	0x2000000c
 8000fe0:	20000114 	.word	0x20000114

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000114 	.word	0x20000114

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_Delay+0x40>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000000c 	.word	0x2000000c

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff29 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff3e 	bl	8001088 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff8e 	bl	8001134 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff31 	bl	80010a4 <__NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffa2 	bl	800119c <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e165      	b.n	800154c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 8154 	bne.w	8001546 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d00b      	beq.n	80012be <HAL_GPIO_Init+0x5a>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b2:	2b11      	cmp	r3, #17
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0xfc>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b12      	cmp	r3, #18
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	69b9      	ldr	r1, [r7, #24]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80ae 	beq.w	8001546 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <HAL_GPIO_Init+0x2fc>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a5b      	ldr	r2, [pc, #364]	; (8001560 <HAL_GPIO_Init+0x2fc>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_GPIO_Init+0x2fc>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001406:	4a57      	ldr	r2, [pc, #348]	; (8001564 <HAL_GPIO_Init+0x300>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4e      	ldr	r2, [pc, #312]	; (8001568 <HAL_GPIO_Init+0x304>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d025      	beq.n	800147e <HAL_GPIO_Init+0x21a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4d      	ldr	r2, [pc, #308]	; (800156c <HAL_GPIO_Init+0x308>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d01f      	beq.n	800147a <HAL_GPIO_Init+0x216>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4c      	ldr	r2, [pc, #304]	; (8001570 <HAL_GPIO_Init+0x30c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d019      	beq.n	8001476 <HAL_GPIO_Init+0x212>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4b      	ldr	r2, [pc, #300]	; (8001574 <HAL_GPIO_Init+0x310>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d013      	beq.n	8001472 <HAL_GPIO_Init+0x20e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4a      	ldr	r2, [pc, #296]	; (8001578 <HAL_GPIO_Init+0x314>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00d      	beq.n	800146e <HAL_GPIO_Init+0x20a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a49      	ldr	r2, [pc, #292]	; (800157c <HAL_GPIO_Init+0x318>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d007      	beq.n	800146a <HAL_GPIO_Init+0x206>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a48      	ldr	r2, [pc, #288]	; (8001580 <HAL_GPIO_Init+0x31c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_GPIO_Init+0x202>
 8001462:	2306      	movs	r3, #6
 8001464:	e00c      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 8001466:	2307      	movs	r3, #7
 8001468:	e00a      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800146a:	2305      	movs	r3, #5
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800146e:	2304      	movs	r3, #4
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800147e:	2300      	movs	r3, #0
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001490:	4934      	ldr	r1, [pc, #208]	; (8001564 <HAL_GPIO_Init+0x300>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_GPIO_Init+0x320>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c2:	4a30      	ldr	r2, [pc, #192]	; (8001584 <HAL_GPIO_Init+0x320>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_GPIO_Init+0x320>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ec:	4a25      	ldr	r2, [pc, #148]	; (8001584 <HAL_GPIO_Init+0x320>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_GPIO_Init+0x320>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <HAL_GPIO_Init+0x320>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_GPIO_Init+0x320>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_GPIO_Init+0x320>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3301      	adds	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	f67f ae96 	bls.w	8001280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001554:	bf00      	nop
 8001556:	3724      	adds	r7, #36	; 0x24
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40023800 	.word	0x40023800
 8001564:	40013800 	.word	0x40013800
 8001568:	40020000 	.word	0x40020000
 800156c:	40020400 	.word	0x40020400
 8001570:	40020800 	.word	0x40020800
 8001574:	40020c00 	.word	0x40020c00
 8001578:	40021000 	.word	0x40021000
 800157c:	40021400 	.word	0x40021400
 8001580:	40021800 	.word	0x40021800
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a4:	e003      	b.n	80015ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	041a      	lsls	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	619a      	str	r2, [r3, #24]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	401a      	ands	r2, r3
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d104      	bne.n	80015de <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	041a      	lsls	r2, r3, #16
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e11f      	b.n	8001842 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fadc 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2224      	movs	r2, #36	; 0x24
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001654:	f001 fa86 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a7b      	ldr	r2, [pc, #492]	; (800184c <HAL_I2C_Init+0x25c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d807      	bhi.n	8001674 <HAL_I2C_Init+0x84>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4a7a      	ldr	r2, [pc, #488]	; (8001850 <HAL_I2C_Init+0x260>)
 8001668:	4293      	cmp	r3, r2
 800166a:	bf94      	ite	ls
 800166c:	2301      	movls	r3, #1
 800166e:	2300      	movhi	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	e006      	b.n	8001682 <HAL_I2C_Init+0x92>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4a77      	ldr	r2, [pc, #476]	; (8001854 <HAL_I2C_Init+0x264>)
 8001678:	4293      	cmp	r3, r2
 800167a:	bf94      	ite	ls
 800167c:	2301      	movls	r3, #1
 800167e:	2300      	movhi	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0db      	b.n	8001842 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4a72      	ldr	r2, [pc, #456]	; (8001858 <HAL_I2C_Init+0x268>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9b      	lsrs	r3, r3, #18
 8001694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a64      	ldr	r2, [pc, #400]	; (800184c <HAL_I2C_Init+0x25c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d802      	bhi.n	80016c4 <HAL_I2C_Init+0xd4>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	e009      	b.n	80016d8 <HAL_I2C_Init+0xe8>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	4a63      	ldr	r2, [pc, #396]	; (800185c <HAL_I2C_Init+0x26c>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	3301      	adds	r3, #1
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	430b      	orrs	r3, r1
 80016de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4956      	ldr	r1, [pc, #344]	; (800184c <HAL_I2C_Init+0x25c>)
 80016f4:	428b      	cmp	r3, r1
 80016f6:	d80d      	bhi.n	8001714 <HAL_I2C_Init+0x124>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1e59      	subs	r1, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fbb1 f3f3 	udiv	r3, r1, r3
 8001706:	3301      	adds	r3, #1
 8001708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170c:	2b04      	cmp	r3, #4
 800170e:	bf38      	it	cc
 8001710:	2304      	movcc	r3, #4
 8001712:	e04f      	b.n	80017b4 <HAL_I2C_Init+0x1c4>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d111      	bne.n	8001740 <HAL_I2C_Init+0x150>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	440b      	add	r3, r1
 800172a:	fbb0 f3f3 	udiv	r3, r0, r3
 800172e:	3301      	adds	r3, #1
 8001730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	e012      	b.n	8001766 <HAL_I2C_Init+0x176>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e58      	subs	r0, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	0099      	lsls	r1, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	fbb0 f3f3 	udiv	r3, r0, r3
 8001756:	3301      	adds	r3, #1
 8001758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_Init+0x17e>
 800176a:	2301      	movs	r3, #1
 800176c:	e022      	b.n	80017b4 <HAL_I2C_Init+0x1c4>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10e      	bne.n	8001794 <HAL_I2C_Init+0x1a4>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1e58      	subs	r0, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6859      	ldr	r1, [r3, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	440b      	add	r3, r1
 8001784:	fbb0 f3f3 	udiv	r3, r0, r3
 8001788:	3301      	adds	r3, #1
 800178a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001792:	e00f      	b.n	80017b4 <HAL_I2C_Init+0x1c4>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e58      	subs	r0, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6859      	ldr	r1, [r3, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	0099      	lsls	r1, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	6809      	ldr	r1, [r1, #0]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69da      	ldr	r2, [r3, #28]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6911      	ldr	r1, [r2, #16]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68d2      	ldr	r2, [r2, #12]
 80017ee:	4311      	orrs	r1, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2220      	movs	r2, #32
 800182e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	000186a0 	.word	0x000186a0
 8001850:	001e847f 	.word	0x001e847f
 8001854:	003d08ff 	.word	0x003d08ff
 8001858:	431bde83 	.word	0x431bde83
 800185c:	10624dd3 	.word	0x10624dd3

08001860 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	4608      	mov	r0, r1
 800186a:	4611      	mov	r1, r2
 800186c:	461a      	mov	r2, r3
 800186e:	4603      	mov	r3, r0
 8001870:	817b      	strh	r3, [r7, #10]
 8001872:	460b      	mov	r3, r1
 8001874:	813b      	strh	r3, [r7, #8]
 8001876:	4613      	mov	r3, r2
 8001878:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800187a:	f7ff fbb3 	bl	8000fe4 <HAL_GetTick>
 800187e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b20      	cmp	r3, #32
 800188a:	f040 80d9 	bne.w	8001a40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2319      	movs	r3, #25
 8001894:	2201      	movs	r2, #1
 8001896:	496d      	ldr	r1, [pc, #436]	; (8001a4c <HAL_I2C_Mem_Write+0x1ec>)
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fdbb 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
 80018a6:	e0cc      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_I2C_Mem_Write+0x56>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e0c5      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d007      	beq.n	80018dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2221      	movs	r2, #33	; 0x21
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6a3a      	ldr	r2, [r7, #32]
 8001906:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800190c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4a4d      	ldr	r2, [pc, #308]	; (8001a50 <HAL_I2C_Mem_Write+0x1f0>)
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800191e:	88f8      	ldrh	r0, [r7, #6]
 8001920:	893a      	ldrh	r2, [r7, #8]
 8001922:	8979      	ldrh	r1, [r7, #10]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4603      	mov	r3, r0
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 fbf2 	bl	8002118 <I2C_RequestMemoryWrite>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d052      	beq.n	80019e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e081      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 fe3c 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00d      	beq.n	800196a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	2b04      	cmp	r3, #4
 8001954:	d107      	bne.n	8001966 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001964:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e06b      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	781a      	ldrb	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001984:	3b01      	subs	r3, #1
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d11b      	bne.n	80019e0 <HAL_I2C_Mem_Write+0x180>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d017      	beq.n	80019e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1aa      	bne.n	800193e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fe28 	bl	8002642 <I2C_WaitOnBTFFlagUntilTimeout>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d107      	bne.n	8001a10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e016      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2220      	movs	r2, #32
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e000      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a40:	2302      	movs	r3, #2
  }
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	00100002 	.word	0x00100002
 8001a50:	ffff0000 	.word	0xffff0000

08001a54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	4611      	mov	r1, r2
 8001a60:	461a      	mov	r2, r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	817b      	strh	r3, [r7, #10]
 8001a66:	460b      	mov	r3, r1
 8001a68:	813b      	strh	r3, [r7, #8]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a6e:	f7ff fab9 	bl	8000fe4 <HAL_GetTick>
 8001a72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	f040 8208 	bne.w	8001e92 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2319      	movs	r3, #25
 8001a88:	2201      	movs	r2, #1
 8001a8a:	497b      	ldr	r1, [pc, #492]	; (8001c78 <HAL_I2C_Mem_Read+0x224>)
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 fcc1 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e1fb      	b.n	8001e94 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2C_Mem_Read+0x56>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e1f4      	b.n	8001e94 <HAL_I2C_Mem_Read+0x440>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d007      	beq.n	8001ad0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2222      	movs	r2, #34	; 0x22
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2240      	movs	r2, #64	; 0x40
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4a5b      	ldr	r2, [pc, #364]	; (8001c7c <HAL_I2C_Mem_Read+0x228>)
 8001b10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b12:	88f8      	ldrh	r0, [r7, #6]
 8001b14:	893a      	ldrh	r2, [r7, #8]
 8001b16:	8979      	ldrh	r1, [r7, #10]
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	4603      	mov	r3, r0
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fb8e 	bl	8002244 <I2C_RequestMemoryRead>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e1b0      	b.n	8001e94 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d113      	bne.n	8001b62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	623b      	str	r3, [r7, #32]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	623b      	str	r3, [r7, #32]
 8001b4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e184      	b.n	8001e6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d11b      	bne.n	8001ba2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e164      	b.n	8001e6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d11b      	bne.n	8001be2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	e144      	b.n	8001e6c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001bf8:	e138      	b.n	8001e6c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	f200 80f1 	bhi.w	8001de6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d123      	bne.n	8001c54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 fd57 	bl	80026c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e139      	b.n	8001e94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c52:	e10b      	b.n	8001e6c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d14e      	bne.n	8001cfa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c62:	2200      	movs	r2, #0
 8001c64:	4906      	ldr	r1, [pc, #24]	; (8001c80 <HAL_I2C_Mem_Read+0x22c>)
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 fbd4 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e10e      	b.n	8001e94 <HAL_I2C_Mem_Read+0x440>
 8001c76:	bf00      	nop
 8001c78:	00100002 	.word	0x00100002
 8001c7c:	ffff0000 	.word	0xffff0000
 8001c80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cf8:	e0b8      	b.n	8001e6c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d00:	2200      	movs	r2, #0
 8001d02:	4966      	ldr	r1, [pc, #408]	; (8001e9c <HAL_I2C_Mem_Read+0x448>)
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fb85 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0bf      	b.n	8001e94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	494f      	ldr	r1, [pc, #316]	; (8001e9c <HAL_I2C_Mem_Read+0x448>)
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 fb57 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e091      	b.n	8001e94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691a      	ldr	r2, [r3, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001de4:	e042      	b.n	8001e6c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fc6a 	bl	80026c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e04c      	b.n	8001e94 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d118      	bne.n	8001e6c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f47f aec2 	bne.w	8001bfa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001e92:	2302      	movs	r3, #2
  }
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3728      	adds	r7, #40	; 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	00010004 	.word	0x00010004

08001ea0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	460b      	mov	r3, r1
 8001eae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff f898 	bl	8000fe4 <HAL_GetTick>
 8001eb4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	f040 8111 	bne.w	80020ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2319      	movs	r3, #25
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4988      	ldr	r1, [pc, #544]	; (80020f4 <HAL_I2C_IsDeviceReady+0x254>)
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fa9e 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e104      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_I2C_IsDeviceReady+0x50>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e0fd      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d007      	beq.n	8001f16 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2224      	movs	r2, #36	; 0x24
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a70      	ldr	r2, [pc, #448]	; (80020f8 <HAL_I2C_IsDeviceReady+0x258>)
 8001f38:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f48:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fa5c 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f70:	d103      	bne.n	8001f7a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0b6      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f7e:	897b      	ldrh	r3, [r7, #10]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f8c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f829 	bl	8000fe4 <HAL_GetTick>
 8001f92:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	bf0c      	ite	eq
 8001fa2:	2301      	moveq	r3, #1
 8001fa4:	2300      	movne	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb8:	bf0c      	ite	eq
 8001fba:	2301      	moveq	r3, #1
 8001fbc:	2300      	movne	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fc2:	e025      	b.n	8002010 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fc4:	f7ff f80e 	bl	8000fe4 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d302      	bcc.n	8001fda <HAL_I2C_IsDeviceReady+0x13a>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	22a0      	movs	r2, #160	; 0xa0
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2ba0      	cmp	r3, #160	; 0xa0
 800201a:	d005      	beq.n	8002028 <HAL_I2C_IsDeviceReady+0x188>
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <HAL_I2C_IsDeviceReady+0x188>
 8002022:	7dbb      	ldrb	r3, [r7, #22]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0cd      	beq.n	8001fc4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b02      	cmp	r3, #2
 800203c:	d129      	bne.n	8002092 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2319      	movs	r3, #25
 800206a:	2201      	movs	r2, #1
 800206c:	4921      	ldr	r1, [pc, #132]	; (80020f4 <HAL_I2C_IsDeviceReady+0x254>)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f9d0 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e036      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e02c      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2319      	movs	r3, #25
 80020b2:	2201      	movs	r2, #1
 80020b4:	490f      	ldr	r1, [pc, #60]	; (80020f4 <HAL_I2C_IsDeviceReady+0x254>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f9ac 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e012      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	3301      	adds	r3, #1
 80020ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	f4ff af32 	bcc.w	8001f3a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
  }
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	00100002 	.word	0x00100002
 80020f8:	ffff0000 	.word	0xffff0000

080020fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210a:	b2db      	uxtb	r3, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	817b      	strh	r3, [r7, #10]
 800212a:	460b      	mov	r3, r1
 800212c:	813b      	strh	r3, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002140:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	2200      	movs	r2, #0
 800214a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f960 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002168:	d103      	bne.n	8002172 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e05f      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002176:	897b      	ldrh	r3, [r7, #10]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002184:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	492d      	ldr	r1, [pc, #180]	; (8002240 <I2C_RequestMemoryWrite+0x128>)
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f998 	bl	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e04c      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	6a39      	ldr	r1, [r7, #32]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fa02 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d107      	bne.n	80021da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e02b      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021e4:	893b      	ldrh	r3, [r7, #8]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	611a      	str	r2, [r3, #16]
 80021ee:	e021      	b.n	8002234 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021f0:	893b      	ldrh	r3, [r7, #8]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	6a39      	ldr	r1, [r7, #32]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f9dc 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b04      	cmp	r3, #4
 8002214:	d107      	bne.n	8002226 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002224:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e005      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800222a:	893b      	ldrh	r3, [r7, #8]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	00010002 	.word	0x00010002

08002244 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4603      	mov	r3, r0
 8002254:	817b      	strh	r3, [r7, #10]
 8002256:	460b      	mov	r3, r1
 8002258:	813b      	strh	r3, [r7, #8]
 800225a:	4613      	mov	r3, r2
 800225c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800226c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800227c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	2200      	movs	r2, #0
 8002286:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f8c2 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a4:	d103      	bne.n	80022ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0aa      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022b2:	897b      	ldrh	r3, [r7, #10]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	6a3a      	ldr	r2, [r7, #32]
 80022c6:	4952      	ldr	r1, [pc, #328]	; (8002410 <I2C_RequestMemoryRead+0x1cc>)
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f8fa 	bl	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e097      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	6a39      	ldr	r1, [r7, #32]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f964 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00d      	beq.n	800231a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b04      	cmp	r3, #4
 8002304:	d107      	bne.n	8002316 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e076      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002320:	893b      	ldrh	r3, [r7, #8]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	e021      	b.n	8002370 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800232c:	893b      	ldrh	r3, [r7, #8]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29b      	uxth	r3, r3
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800233a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233c:	6a39      	ldr	r1, [r7, #32]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f93e 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00d      	beq.n	8002366 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2b04      	cmp	r3, #4
 8002350:	d107      	bne.n	8002362 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e050      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002366:	893b      	ldrh	r3, [r7, #8]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002372:	6a39      	ldr	r1, [r7, #32]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f923 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00d      	beq.n	800239c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2b04      	cmp	r3, #4
 8002386:	d107      	bne.n	8002398 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e035      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f82b 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d2:	d103      	bne.n	80023dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e013      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023e0:	897b      	ldrh	r3, [r7, #10]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	6a3a      	ldr	r2, [r7, #32]
 80023f4:	4906      	ldr	r1, [pc, #24]	; (8002410 <I2C_RequestMemoryRead+0x1cc>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f863 	bl	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	00010002 	.word	0x00010002

08002414 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002424:	e025      	b.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800242c:	d021      	beq.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242e:	f7fe fdd9 	bl	8000fe4 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d302      	bcc.n	8002444 <I2C_WaitOnFlagUntilTimeout+0x30>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d116      	bne.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f043 0220 	orr.w	r2, r3, #32
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e023      	b.n	80024ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10d      	bne.n	8002498 <I2C_WaitOnFlagUntilTimeout+0x84>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4013      	ands	r3, r2
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	e00c      	b.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4013      	ands	r3, r2
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d0b6      	beq.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024d0:	e051      	b.n	8002576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e0:	d123      	bne.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0204 	orr.w	r2, r3, #4
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e046      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002530:	d021      	beq.n	8002576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002532:	f7fe fd57 	bl	8000fe4 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	d302      	bcc.n	8002548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d116      	bne.n	8002576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f043 0220 	orr.w	r2, r3, #32
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e020      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d10c      	bne.n	800259a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4013      	ands	r3, r2
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	bf14      	ite	ne
 8002592:	2301      	movne	r3, #1
 8002594:	2300      	moveq	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	e00b      	b.n	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	43da      	mvns	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	4013      	ands	r3, r2
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d18d      	bne.n	80024d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025cc:	e02d      	b.n	800262a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f8ce 	bl	8002770 <I2C_IsAcknowledgeFailed>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e02d      	b.n	800263a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e4:	d021      	beq.n	800262a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e6:	f7fe fcfd 	bl	8000fe4 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d302      	bcc.n	80025fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d116      	bne.n	800262a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f043 0220 	orr.w	r2, r3, #32
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e007      	b.n	800263a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002634:	2b80      	cmp	r3, #128	; 0x80
 8002636:	d1ca      	bne.n	80025ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800264e:	e02d      	b.n	80026ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f88d 	bl	8002770 <I2C_IsAcknowledgeFailed>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e02d      	b.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002666:	d021      	beq.n	80026ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002668:	f7fe fcbc 	bl	8000fe4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	429a      	cmp	r2, r3
 8002676:	d302      	bcc.n	800267e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d116      	bne.n	80026ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f043 0220 	orr.w	r2, r3, #32
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e007      	b.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d1ca      	bne.n	8002650 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026d0:	e042      	b.n	8002758 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d119      	bne.n	8002714 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0210 	mvn.w	r2, #16
 80026e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e029      	b.n	8002768 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002714:	f7fe fc66 	bl	8000fe4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	429a      	cmp	r2, r3
 8002722:	d302      	bcc.n	800272a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e007      	b.n	8002768 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d1b5      	bne.n	80026d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002786:	d11b      	bne.n	80027c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002790:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f043 0204 	orr.w	r2, r3, #4
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0cc      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d90c      	bls.n	800280c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b8      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800282e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	494d      	ldr	r1, [pc, #308]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d044      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d119      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d003      	beq.n	800288e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	2b03      	cmp	r3, #3
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e067      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ae:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4934      	ldr	r1, [pc, #208]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c0:	f7fe fb90 	bl	8000fe4 <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7fe fb8c 	bl	8000fe4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 020c 	and.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1eb      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d20c      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e032      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4916      	ldr	r1, [pc, #88]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f821 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295a:	4601      	mov	r1, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	5cd3      	ldrb	r3, [r2, r3]
 800296a:	fa21 f303 	lsr.w	r3, r1, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe faf0 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023c00 	.word	0x40023c00
 800298c:	40023800 	.word	0x40023800
 8002990:	08003898 	.word	0x08003898
 8002994:	20000004 	.word	0x20000004
 8002998:	20000008 	.word	0x20000008

0800299c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	2300      	movs	r3, #0
 80029ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b2:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d007      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x32>
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d008      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x38>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 80b4 	bne.w	8002b30 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b5e      	ldr	r3, [pc, #376]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029ca:	60bb      	str	r3, [r7, #8]
       break;
 80029cc:	e0b3      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ce:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80029d0:	60bb      	str	r3, [r7, #8]
      break;
 80029d2:	e0b0      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d4:	4b5a      	ldr	r3, [pc, #360]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029de:	4b58      	ldr	r3, [pc, #352]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d04a      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ea:	4b55      	ldr	r3, [pc, #340]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	f04f 0400 	mov.w	r4, #0
 80029f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	ea03 0501 	and.w	r5, r3, r1
 8002a00:	ea04 0602 	and.w	r6, r4, r2
 8002a04:	4629      	mov	r1, r5
 8002a06:	4632      	mov	r2, r6
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	f04f 0400 	mov.w	r4, #0
 8002a10:	0154      	lsls	r4, r2, #5
 8002a12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a16:	014b      	lsls	r3, r1, #5
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	1b49      	subs	r1, r1, r5
 8002a1e:	eb62 0206 	sbc.w	r2, r2, r6
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	f04f 0400 	mov.w	r4, #0
 8002a2a:	0194      	lsls	r4, r2, #6
 8002a2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a30:	018b      	lsls	r3, r1, #6
 8002a32:	1a5b      	subs	r3, r3, r1
 8002a34:	eb64 0402 	sbc.w	r4, r4, r2
 8002a38:	f04f 0100 	mov.w	r1, #0
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	00e2      	lsls	r2, r4, #3
 8002a42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a46:	00d9      	lsls	r1, r3, #3
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4614      	mov	r4, r2
 8002a4c:	195b      	adds	r3, r3, r5
 8002a4e:	eb44 0406 	adc.w	r4, r4, r6
 8002a52:	f04f 0100 	mov.w	r1, #0
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	0262      	lsls	r2, r4, #9
 8002a5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a60:	0259      	lsls	r1, r3, #9
 8002a62:	460b      	mov	r3, r1
 8002a64:	4614      	mov	r4, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	4621      	mov	r1, r4
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f04f 0400 	mov.w	r4, #0
 8002a70:	461a      	mov	r2, r3
 8002a72:	4623      	mov	r3, r4
 8002a74:	f7fd fbd0 	bl	8000218 <__aeabi_uldivmod>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	460c      	mov	r4, r1
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	e049      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a80:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	099b      	lsrs	r3, r3, #6
 8002a86:	f04f 0400 	mov.w	r4, #0
 8002a8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	ea03 0501 	and.w	r5, r3, r1
 8002a96:	ea04 0602 	and.w	r6, r4, r2
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	4632      	mov	r2, r6
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	f04f 0400 	mov.w	r4, #0
 8002aa6:	0154      	lsls	r4, r2, #5
 8002aa8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aac:	014b      	lsls	r3, r1, #5
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4622      	mov	r2, r4
 8002ab2:	1b49      	subs	r1, r1, r5
 8002ab4:	eb62 0206 	sbc.w	r2, r2, r6
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	f04f 0400 	mov.w	r4, #0
 8002ac0:	0194      	lsls	r4, r2, #6
 8002ac2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ac6:	018b      	lsls	r3, r1, #6
 8002ac8:	1a5b      	subs	r3, r3, r1
 8002aca:	eb64 0402 	sbc.w	r4, r4, r2
 8002ace:	f04f 0100 	mov.w	r1, #0
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	00e2      	lsls	r2, r4, #3
 8002ad8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002adc:	00d9      	lsls	r1, r3, #3
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4614      	mov	r4, r2
 8002ae2:	195b      	adds	r3, r3, r5
 8002ae4:	eb44 0406 	adc.w	r4, r4, r6
 8002ae8:	f04f 0100 	mov.w	r1, #0
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	02a2      	lsls	r2, r4, #10
 8002af2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002af6:	0299      	lsls	r1, r3, #10
 8002af8:	460b      	mov	r3, r1
 8002afa:	4614      	mov	r4, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	4621      	mov	r1, r4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f04f 0400 	mov.w	r4, #0
 8002b06:	461a      	mov	r2, r3
 8002b08:	4623      	mov	r3, r4
 8002b0a:	f7fd fb85 	bl	8000218 <__aeabi_uldivmod>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	460c      	mov	r4, r1
 8002b12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	60bb      	str	r3, [r7, #8]
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b32:	60bb      	str	r3, [r7, #8]
      break;
 8002b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b36:	68bb      	ldr	r3, [r7, #8]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b40:	40023800 	.word	0x40023800
 8002b44:	00f42400 	.word	0x00f42400
 8002b48:	007a1200 	.word	0x007a1200

08002b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b68:	f7ff fff0 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b6c:	4601      	mov	r1, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7a:	5cd3      	ldrb	r3, [r2, r3]
 8002b7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	080038a8 	.word	0x080038a8

08002b8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d075      	beq.n	8002c90 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ba4:	4ba2      	ldr	r3, [pc, #648]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d00c      	beq.n	8002bca <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb0:	4b9f      	ldr	r3, [pc, #636]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d112      	bne.n	8002be2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbc:	4b9c      	ldr	r3, [pc, #624]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc8:	d10b      	bne.n	8002be2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bca:	4b99      	ldr	r3, [pc, #612]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d05b      	beq.n	8002c8e <HAL_RCC_OscConfig+0x102>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d157      	bne.n	8002c8e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e20b      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x6e>
 8002bec:	4b90      	ldr	r3, [pc, #576]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a8f      	ldr	r2, [pc, #572]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e01d      	b.n	8002c36 <HAL_RCC_OscConfig+0xaa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c02:	d10c      	bne.n	8002c1e <HAL_RCC_OscConfig+0x92>
 8002c04:	4b8a      	ldr	r3, [pc, #552]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a89      	ldr	r2, [pc, #548]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b87      	ldr	r3, [pc, #540]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a86      	ldr	r2, [pc, #536]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e00b      	b.n	8002c36 <HAL_RCC_OscConfig+0xaa>
 8002c1e:	4b84      	ldr	r3, [pc, #528]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a83      	ldr	r2, [pc, #524]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b81      	ldr	r3, [pc, #516]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a80      	ldr	r2, [pc, #512]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d013      	beq.n	8002c66 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3e:	f7fe f9d1 	bl	8000fe4 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c46:	f7fe f9cd 	bl	8000fe4 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1d0      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c58:	4b75      	ldr	r3, [pc, #468]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0xba>
 8002c64:	e014      	b.n	8002c90 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7fe f9bd 	bl	8000fe4 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6e:	f7fe f9b9 	bl	8000fe4 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b64      	cmp	r3, #100	; 0x64
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e1bc      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c80:	4b6b      	ldr	r3, [pc, #428]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0xe2>
 8002c8c:	e000      	b.n	8002c90 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d063      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c9c:	4b64      	ldr	r3, [pc, #400]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca8:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d11c      	bne.n	8002cee <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb4:	4b5e      	ldr	r3, [pc, #376]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d116      	bne.n	8002cee <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc0:	4b5b      	ldr	r3, [pc, #364]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x14c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e190      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	4b55      	ldr	r3, [pc, #340]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4952      	ldr	r1, [pc, #328]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cec:	e03a      	b.n	8002d64 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d020      	beq.n	8002d38 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf6:	4b4f      	ldr	r3, [pc, #316]	; (8002e34 <HAL_RCC_OscConfig+0x2a8>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe f972 	bl	8000fe4 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe f96e 	bl	8000fe4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e171      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d16:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	493f      	ldr	r1, [pc, #252]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
 8002d36:	e015      	b.n	8002d64 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d38:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <HAL_RCC_OscConfig+0x2a8>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe f951 	bl	8000fe4 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe f94d 	bl	8000fe4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e150      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d58:	4b35      	ldr	r3, [pc, #212]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d030      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d016      	beq.n	8002da6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7e:	f7fe f931 	bl	8000fe4 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d86:	f7fe f92d 	bl	8000fe4 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e130      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1fa>
 8002da4:	e015      	b.n	8002dd2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da6:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fe f91a 	bl	8000fe4 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe f916 	bl	8000fe4 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e119      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 809f 	beq.w	8002f1e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10f      	bne.n	8002e10 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <HAL_RCC_OscConfig+0x2b0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d120      	bne.n	8002e5e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <HAL_RCC_OscConfig+0x2b0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a06      	ldr	r2, [pc, #24]	; (8002e3c <HAL_RCC_OscConfig+0x2b0>)
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e28:	f7fe f8dc 	bl	8000fe4 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	e010      	b.n	8002e52 <HAL_RCC_OscConfig+0x2c6>
 8002e30:	40023800 	.word	0x40023800
 8002e34:	42470000 	.word	0x42470000
 8002e38:	42470e80 	.word	0x42470e80
 8002e3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7fe f8d0 	bl	8000fe4 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e0d3      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d106      	bne.n	8002e74 <HAL_RCC_OscConfig+0x2e8>
 8002e66:	4b68      	ldr	r3, [pc, #416]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a67      	ldr	r2, [pc, #412]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
 8002e72:	e01c      	b.n	8002eae <HAL_RCC_OscConfig+0x322>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d10c      	bne.n	8002e96 <HAL_RCC_OscConfig+0x30a>
 8002e7c:	4b62      	ldr	r3, [pc, #392]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a61      	ldr	r2, [pc, #388]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
 8002e88:	4b5f      	ldr	r3, [pc, #380]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a5e      	ldr	r2, [pc, #376]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
 8002e94:	e00b      	b.n	8002eae <HAL_RCC_OscConfig+0x322>
 8002e96:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a5b      	ldr	r2, [pc, #364]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea2:	4b59      	ldr	r3, [pc, #356]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a58      	ldr	r2, [pc, #352]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d015      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fe f895 	bl	8000fe4 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe f891 	bl	8000fe4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e092      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	4b4c      	ldr	r3, [pc, #304]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ee      	beq.n	8002ebe <HAL_RCC_OscConfig+0x332>
 8002ee0:	e014      	b.n	8002f0c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee2:	f7fe f87f 	bl	8000fe4 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fe f87b 	bl	8000fe4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e07c      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f00:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ee      	bne.n	8002eea <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d105      	bne.n	8002f1e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f12:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a3c      	ldr	r2, [pc, #240]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d068      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d060      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d145      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b34      	ldr	r3, [pc, #208]	; (800300c <HAL_RCC_OscConfig+0x480>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe f850 	bl	8000fe4 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe f84c 	bl	8000fe4 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e04f      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	041b      	lsls	r3, r3, #16
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	071b      	lsls	r3, r3, #28
 8002f92:	491d      	ldr	r1, [pc, #116]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f98:	4b1c      	ldr	r3, [pc, #112]	; (800300c <HAL_RCC_OscConfig+0x480>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fe f821 	bl	8000fe4 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe f81d 	bl	8000fe4 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e020      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x41a>
 8002fc4:	e018      	b.n	8002ff8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b11      	ldr	r3, [pc, #68]	; (800300c <HAL_RCC_OscConfig+0x480>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f80a 	bl	8000fe4 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe f806 	bl	8000fe4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e009      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x448>
 8002ff2:	e001      	b.n	8002ff8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40007000 	.word	0x40007000
 8003008:	40023800 	.word	0x40023800
 800300c:	42470060 	.word	0x42470060

08003010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e01d      	b.n	800305e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fe14 	bl	8000c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f000 fa14 	bl	800347c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b06      	cmp	r3, #6
 800308e:	d007      	beq.n	80030a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d122      	bne.n	800310a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d11b      	bne.n	800310a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0202 	mvn.w	r2, #2
 80030da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f9a5 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 80030f6:	e005      	b.n	8003104 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f997 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f9a8 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b04      	cmp	r3, #4
 8003116:	d122      	bne.n	800315e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d11b      	bne.n	800315e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f06f 0204 	mvn.w	r2, #4
 800312e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f97b 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 800314a:	e005      	b.n	8003158 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f96d 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f97e 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b08      	cmp	r3, #8
 800316a:	d122      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b08      	cmp	r3, #8
 8003178:	d11b      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0208 	mvn.w	r2, #8
 8003182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2204      	movs	r2, #4
 8003188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f951 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 800319e:	e005      	b.n	80031ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f943 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f954 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d122      	bne.n	8003206 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d11b      	bne.n	8003206 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0210 	mvn.w	r2, #16
 80031d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2208      	movs	r2, #8
 80031dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f927 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 80031f2:	e005      	b.n	8003200 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f919 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f92a 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10e      	bne.n	8003232 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0201 	mvn.w	r2, #1
 800322a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fd fe1b 	bl	8000e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	2b80      	cmp	r3, #128	; 0x80
 800323e:	d10e      	bne.n	800325e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b80      	cmp	r3, #128	; 0x80
 800324c:	d107      	bne.n	800325e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 facf 	bl	80037fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	d10e      	bne.n	800328a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d107      	bne.n	800328a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f8ef 	bl	8003468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b20      	cmp	r3, #32
 8003296:	d10e      	bne.n	80032b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d107      	bne.n	80032b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f06f 0220 	mvn.w	r2, #32
 80032ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fa99 	bl	80037e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_TIM_ConfigClockSource+0x18>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0a6      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x166>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d067      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x120>
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d80b      	bhi.n	800332a <HAL_TIM_ConfigClockSource+0x6c>
 8003312:	2b10      	cmp	r3, #16
 8003314:	d073      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x140>
 8003316:	2b10      	cmp	r3, #16
 8003318:	d802      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x62>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d06f      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800331e:	e078      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003320:	2b20      	cmp	r3, #32
 8003322:	d06c      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x140>
 8003324:	2b30      	cmp	r3, #48	; 0x30
 8003326:	d06a      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003328:	e073      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800332a:	2b70      	cmp	r3, #112	; 0x70
 800332c:	d00d      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x8c>
 800332e:	2b70      	cmp	r3, #112	; 0x70
 8003330:	d804      	bhi.n	800333c <HAL_TIM_ConfigClockSource+0x7e>
 8003332:	2b50      	cmp	r3, #80	; 0x50
 8003334:	d033      	beq.n	800339e <HAL_TIM_ConfigClockSource+0xe0>
 8003336:	2b60      	cmp	r3, #96	; 0x60
 8003338:	d041      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x100>
      break;
 800333a:	e06a      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800333c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003340:	d066      	beq.n	8003410 <HAL_TIM_ConfigClockSource+0x152>
 8003342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003346:	d017      	beq.n	8003378 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003348:	e063      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6899      	ldr	r1, [r3, #8]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f000 f9a9 	bl	80036b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800336c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	609a      	str	r2, [r3, #8]
      break;
 8003376:	e04c      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	6899      	ldr	r1, [r3, #8]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f000 f992 	bl	80036b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800339a:	609a      	str	r2, [r3, #8]
      break;
 800339c:	e039      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6859      	ldr	r1, [r3, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f000 f906 	bl	80035bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2150      	movs	r1, #80	; 0x50
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f95f 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 80033bc:	e029      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f000 f925 	bl	800361a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2160      	movs	r1, #96	; 0x60
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f94f 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 80033dc:	e019      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f000 f8e6 	bl	80035bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2140      	movs	r1, #64	; 0x40
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 f93f 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 80033fc:	e009      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	f000 f936 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 800340e:	e000      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003410:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a40      	ldr	r2, [pc, #256]	; (8003590 <TIM_Base_SetConfig+0x114>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d013      	beq.n	80034bc <TIM_Base_SetConfig+0x40>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349a:	d00f      	beq.n	80034bc <TIM_Base_SetConfig+0x40>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a3d      	ldr	r2, [pc, #244]	; (8003594 <TIM_Base_SetConfig+0x118>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00b      	beq.n	80034bc <TIM_Base_SetConfig+0x40>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a3c      	ldr	r2, [pc, #240]	; (8003598 <TIM_Base_SetConfig+0x11c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d007      	beq.n	80034bc <TIM_Base_SetConfig+0x40>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a3b      	ldr	r2, [pc, #236]	; (800359c <TIM_Base_SetConfig+0x120>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d003      	beq.n	80034bc <TIM_Base_SetConfig+0x40>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a3a      	ldr	r2, [pc, #232]	; (80035a0 <TIM_Base_SetConfig+0x124>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d108      	bne.n	80034ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a2f      	ldr	r2, [pc, #188]	; (8003590 <TIM_Base_SetConfig+0x114>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d02b      	beq.n	800352e <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034dc:	d027      	beq.n	800352e <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a2c      	ldr	r2, [pc, #176]	; (8003594 <TIM_Base_SetConfig+0x118>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d023      	beq.n	800352e <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a2b      	ldr	r2, [pc, #172]	; (8003598 <TIM_Base_SetConfig+0x11c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01f      	beq.n	800352e <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a2a      	ldr	r2, [pc, #168]	; (800359c <TIM_Base_SetConfig+0x120>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01b      	beq.n	800352e <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a29      	ldr	r2, [pc, #164]	; (80035a0 <TIM_Base_SetConfig+0x124>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d017      	beq.n	800352e <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a28      	ldr	r2, [pc, #160]	; (80035a4 <TIM_Base_SetConfig+0x128>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a27      	ldr	r2, [pc, #156]	; (80035a8 <TIM_Base_SetConfig+0x12c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00f      	beq.n	800352e <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a26      	ldr	r2, [pc, #152]	; (80035ac <TIM_Base_SetConfig+0x130>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00b      	beq.n	800352e <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a25      	ldr	r2, [pc, #148]	; (80035b0 <TIM_Base_SetConfig+0x134>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d007      	beq.n	800352e <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a24      	ldr	r2, [pc, #144]	; (80035b4 <TIM_Base_SetConfig+0x138>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <TIM_Base_SetConfig+0x13c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d108      	bne.n	8003540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <TIM_Base_SetConfig+0x114>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_Base_SetConfig+0xf8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a0c      	ldr	r2, [pc, #48]	; (80035a0 <TIM_Base_SetConfig+0x124>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d103      	bne.n	800357c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	615a      	str	r2, [r3, #20]
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40010400 	.word	0x40010400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800
 80035b0:	40001800 	.word	0x40001800
 80035b4:	40001c00 	.word	0x40001c00
 80035b8:	40002000 	.word	0x40002000

080035bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f023 0201 	bic.w	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f023 030a 	bic.w	r3, r3, #10
 80035f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	621a      	str	r2, [r3, #32]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361a:	b480      	push	{r7}
 800361c:	b087      	sub	sp, #28
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f023 0210 	bic.w	r2, r3, #16
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	031b      	lsls	r3, r3, #12
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003656:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	f043 0307 	orr.w	r3, r3, #7
 800369c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	609a      	str	r2, [r3, #8]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003704:	2302      	movs	r3, #2
 8003706:	e05a      	b.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a21      	ldr	r2, [pc, #132]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d022      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d01d      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d018      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a18      	ldr	r2, [pc, #96]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10c      	bne.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40010000 	.word	0x40010000
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800
 80037d8:	40000c00 	.word	0x40000c00
 80037dc:	40010400 	.word	0x40010400
 80037e0:	40014000 	.word	0x40014000
 80037e4:	40001800 	.word	0x40001800

080037e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <__libc_init_array>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	4e0d      	ldr	r6, [pc, #52]	; (8003848 <__libc_init_array+0x38>)
 8003814:	4c0d      	ldr	r4, [pc, #52]	; (800384c <__libc_init_array+0x3c>)
 8003816:	1ba4      	subs	r4, r4, r6
 8003818:	10a4      	asrs	r4, r4, #2
 800381a:	2500      	movs	r5, #0
 800381c:	42a5      	cmp	r5, r4
 800381e:	d109      	bne.n	8003834 <__libc_init_array+0x24>
 8003820:	4e0b      	ldr	r6, [pc, #44]	; (8003850 <__libc_init_array+0x40>)
 8003822:	4c0c      	ldr	r4, [pc, #48]	; (8003854 <__libc_init_array+0x44>)
 8003824:	f000 f82c 	bl	8003880 <_init>
 8003828:	1ba4      	subs	r4, r4, r6
 800382a:	10a4      	asrs	r4, r4, #2
 800382c:	2500      	movs	r5, #0
 800382e:	42a5      	cmp	r5, r4
 8003830:	d105      	bne.n	800383e <__libc_init_array+0x2e>
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003838:	4798      	blx	r3
 800383a:	3501      	adds	r5, #1
 800383c:	e7ee      	b.n	800381c <__libc_init_array+0xc>
 800383e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003842:	4798      	blx	r3
 8003844:	3501      	adds	r5, #1
 8003846:	e7f2      	b.n	800382e <__libc_init_array+0x1e>
 8003848:	080038b8 	.word	0x080038b8
 800384c:	080038b8 	.word	0x080038b8
 8003850:	080038b8 	.word	0x080038b8
 8003854:	080038bc 	.word	0x080038bc

08003858 <memcpy>:
 8003858:	b510      	push	{r4, lr}
 800385a:	1e43      	subs	r3, r0, #1
 800385c:	440a      	add	r2, r1
 800385e:	4291      	cmp	r1, r2
 8003860:	d100      	bne.n	8003864 <memcpy+0xc>
 8003862:	bd10      	pop	{r4, pc}
 8003864:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003868:	f803 4f01 	strb.w	r4, [r3, #1]!
 800386c:	e7f7      	b.n	800385e <memcpy+0x6>

0800386e <memset>:
 800386e:	4402      	add	r2, r0
 8003870:	4603      	mov	r3, r0
 8003872:	4293      	cmp	r3, r2
 8003874:	d100      	bne.n	8003878 <memset+0xa>
 8003876:	4770      	bx	lr
 8003878:	f803 1b01 	strb.w	r1, [r3], #1
 800387c:	e7f9      	b.n	8003872 <memset+0x4>
	...

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
